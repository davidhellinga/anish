//noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.30"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'jacoco'
}

group 'oibss'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile 'org.junit.jupiter:junit-jupiter:5.4.1'
    testCompile group: 'io.kotlintest', name: 'kotlintest-runner-junit5', version: '3.3.2'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.30'

}

test {
    useJUnitPlatform()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml']
}

jar {
    manifest {
        attributes 'Main-Class': 'App'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


mainClassName = "App"